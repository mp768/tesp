//(+ 2 3 3 3 3 3 3 3 3 3 3 (+ 1 2) (+ 1 2) (+ 1 2) (+ 1 2) (+ 1 2))
// This ^ is equal to this \/
//(+ 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3)


// This how you can define a variable
(var h uint (+ 5 (+ 2 ( + 2 1))))
(var j int 4)
// You can also just avoid writing a type and the language can infer it.
(var i (+ h 5.5))
(var o 4.3)
(var p int 4)
(var q int 4)
(var r int 4)
(var s int 1)

// This is an example of assigning a new value
(assign s 2)

// This is an example of how to define a simple add function
(func add [a int, b int] int (return (+ s a b)))

// You can also have functions that do not return anything
// P.S. I also plan to implement an 'any' type for dynamicness
(func new_print_int [s int] (println s))

// an implementation of 'fibonacci' in this language.
// This implementation is slower, but it works at least.
(func fib [n int] int ((if (<= n 1) 
        (return n)
        (return (+ (fib (- n 1)) (fib (- n 2))))
    ))
)

(if (> 5 4) 
    (if (> h p) 
        (println 6) 
        (println 8)
    ) 
    (println 7)
)

(if (> 5 4) 
    (println (+ 5 5)) 
    (println (+ 1 2))
)

// this is an example of using a native function, which can lead to faster calculations
(println (fibonacci 32))
(println (fib 32)) // This is slow
(println (add 6 7))
//(println (clock))

(var kop 0)
(while (< kop 5) 
    ((assign kop (+ kop 1)) (println kop))
)